// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/clojure_compiler_bridge.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ClojureCompilerBridgeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ClojureCompilerBridgeBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ClojureCompilerBridgeBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> init_enviroment() {
    return _init_enviroment();
  }

  late final _init_enviromentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'init_enviroment');
  late final _init_enviroment =
      _init_enviromentPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int parse_line(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> buff,
    ffi.Pointer<ffi.Char> line,
  ) {
    return _parse_line(
      buff,
      line,
    );
  }

  late final _parse_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Char>)>>('parse_line');
  late final _parse_line = _parse_linePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> eval_line(
    ffi.Pointer<ffi.Char> line,
    ffi.Pointer<ffi.Void> env,
  ) {
    return _eval_line(
      line,
      env,
    );
  }

  late final _eval_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('eval_line');
  late final _eval_line = _eval_linePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();
}
