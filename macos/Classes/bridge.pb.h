// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bridge_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bridge_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bridge_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bridge_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bridge_2eproto;
namespace bridge {
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
class TokenFalse;
struct TokenFalseDefaultTypeInternal;
extern TokenFalseDefaultTypeInternal _TokenFalse_default_instance_;
class TokenKeyword;
struct TokenKeywordDefaultTypeInternal;
extern TokenKeywordDefaultTypeInternal _TokenKeyword_default_instance_;
class TokenList;
struct TokenListDefaultTypeInternal;
extern TokenListDefaultTypeInternal _TokenList_default_instance_;
class TokenNil;
struct TokenNilDefaultTypeInternal;
extern TokenNilDefaultTypeInternal _TokenNil_default_instance_;
class TokenNumber;
struct TokenNumberDefaultTypeInternal;
extern TokenNumberDefaultTypeInternal _TokenNumber_default_instance_;
class TokenString;
struct TokenStringDefaultTypeInternal;
extern TokenStringDefaultTypeInternal _TokenString_default_instance_;
class TokenSymbol;
struct TokenSymbolDefaultTypeInternal;
extern TokenSymbolDefaultTypeInternal _TokenSymbol_default_instance_;
class TokenTrue;
struct TokenTrueDefaultTypeInternal;
extern TokenTrueDefaultTypeInternal _TokenTrue_default_instance_;
}  // namespace bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::bridge::Token* Arena::CreateMaybeMessage<::bridge::Token>(Arena*);
template<> ::bridge::TokenFalse* Arena::CreateMaybeMessage<::bridge::TokenFalse>(Arena*);
template<> ::bridge::TokenKeyword* Arena::CreateMaybeMessage<::bridge::TokenKeyword>(Arena*);
template<> ::bridge::TokenList* Arena::CreateMaybeMessage<::bridge::TokenList>(Arena*);
template<> ::bridge::TokenNil* Arena::CreateMaybeMessage<::bridge::TokenNil>(Arena*);
template<> ::bridge::TokenNumber* Arena::CreateMaybeMessage<::bridge::TokenNumber>(Arena*);
template<> ::bridge::TokenString* Arena::CreateMaybeMessage<::bridge::TokenString>(Arena*);
template<> ::bridge::TokenSymbol* Arena::CreateMaybeMessage<::bridge::TokenSymbol>(Arena*);
template<> ::bridge::TokenTrue* Arena::CreateMaybeMessage<::bridge::TokenTrue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bridge {

enum TokenType : int {
  TT_SYMBOL = 0,
  TT_KEYWORD = 1,
  TT_STRING = 2,
  TT_NUMBER = 3,
  TT_NIL = 4,
  TT_TRUE = 5,
  TT_FALSE = 6,
  TT_LIST = 7,
  TokenType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TokenType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TokenType_IsValid(int value);
constexpr TokenType TokenType_MIN = TT_SYMBOL;
constexpr TokenType TokenType_MAX = TT_LIST;
constexpr int TokenType_ARRAYSIZE = TokenType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TokenType_descriptor();
template<typename T>
inline const std::string& TokenType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TokenType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TokenType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TokenType_descriptor(), enum_t_value);
}
inline bool TokenType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TokenType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TokenType>(
    TokenType_descriptor(), name, value);
}
// ===================================================================

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bridge.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit PROTOBUF_CONSTEXPR Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kSymbol = 2,
    kKeyword = 3,
    kString = 4,
    kNumber = 5,
    kNil = 6,
    kTrue = 7,
    kFalse = 8,
    kList = 9,
    VALUE_NOT_SET = 0,
  };

  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kKeywordFieldNumber = 3,
    kStringFieldNumber = 4,
    kNumberFieldNumber = 5,
    kNilFieldNumber = 6,
    kTrueFieldNumber = 7,
    kFalseFieldNumber = 8,
    kListFieldNumber = 9,
  };
  // .bridge.TokenType type = 1;
  void clear_type();
  ::bridge::TokenType type() const;
  void set_type(::bridge::TokenType value);
  private:
  ::bridge::TokenType _internal_type() const;
  void _internal_set_type(::bridge::TokenType value);
  public:

  // .bridge.TokenSymbol symbol = 2;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const ::bridge::TokenSymbol& symbol() const;
  PROTOBUF_NODISCARD ::bridge::TokenSymbol* release_symbol();
  ::bridge::TokenSymbol* mutable_symbol();
  void set_allocated_symbol(::bridge::TokenSymbol* symbol);
  private:
  const ::bridge::TokenSymbol& _internal_symbol() const;
  ::bridge::TokenSymbol* _internal_mutable_symbol();
  public:
  void unsafe_arena_set_allocated_symbol(
      ::bridge::TokenSymbol* symbol);
  ::bridge::TokenSymbol* unsafe_arena_release_symbol();

  // .bridge.TokenKeyword keyword = 3;
  bool has_keyword() const;
  private:
  bool _internal_has_keyword() const;
  public:
  void clear_keyword();
  const ::bridge::TokenKeyword& keyword() const;
  PROTOBUF_NODISCARD ::bridge::TokenKeyword* release_keyword();
  ::bridge::TokenKeyword* mutable_keyword();
  void set_allocated_keyword(::bridge::TokenKeyword* keyword);
  private:
  const ::bridge::TokenKeyword& _internal_keyword() const;
  ::bridge::TokenKeyword* _internal_mutable_keyword();
  public:
  void unsafe_arena_set_allocated_keyword(
      ::bridge::TokenKeyword* keyword);
  ::bridge::TokenKeyword* unsafe_arena_release_keyword();

  // .bridge.TokenString string = 4;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::bridge::TokenString& string() const;
  PROTOBUF_NODISCARD ::bridge::TokenString* release_string();
  ::bridge::TokenString* mutable_string();
  void set_allocated_string(::bridge::TokenString* string);
  private:
  const ::bridge::TokenString& _internal_string() const;
  ::bridge::TokenString* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::bridge::TokenString* string);
  ::bridge::TokenString* unsafe_arena_release_string();

  // .bridge.TokenNumber number = 5;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  const ::bridge::TokenNumber& number() const;
  PROTOBUF_NODISCARD ::bridge::TokenNumber* release_number();
  ::bridge::TokenNumber* mutable_number();
  void set_allocated_number(::bridge::TokenNumber* number);
  private:
  const ::bridge::TokenNumber& _internal_number() const;
  ::bridge::TokenNumber* _internal_mutable_number();
  public:
  void unsafe_arena_set_allocated_number(
      ::bridge::TokenNumber* number);
  ::bridge::TokenNumber* unsafe_arena_release_number();

  // .bridge.TokenNil nil = 6;
  bool has_nil() const;
  private:
  bool _internal_has_nil() const;
  public:
  void clear_nil();
  const ::bridge::TokenNil& nil() const;
  PROTOBUF_NODISCARD ::bridge::TokenNil* release_nil();
  ::bridge::TokenNil* mutable_nil();
  void set_allocated_nil(::bridge::TokenNil* nil);
  private:
  const ::bridge::TokenNil& _internal_nil() const;
  ::bridge::TokenNil* _internal_mutable_nil();
  public:
  void unsafe_arena_set_allocated_nil(
      ::bridge::TokenNil* nil);
  ::bridge::TokenNil* unsafe_arena_release_nil();

  // .bridge.TokenTrue true = 7;
  bool has_true_() const;
  private:
  bool _internal_has_true_() const;
  public:
  void clear_true_();
  const ::bridge::TokenTrue& true_() const;
  PROTOBUF_NODISCARD ::bridge::TokenTrue* release_true_();
  ::bridge::TokenTrue* mutable_true_();
  void set_allocated_true_(::bridge::TokenTrue* true_);
  private:
  const ::bridge::TokenTrue& _internal_true_() const;
  ::bridge::TokenTrue* _internal_mutable_true_();
  public:
  void unsafe_arena_set_allocated_true_(
      ::bridge::TokenTrue* true_);
  ::bridge::TokenTrue* unsafe_arena_release_true_();

  // .bridge.TokenFalse false = 8;
  bool has_false_() const;
  private:
  bool _internal_has_false_() const;
  public:
  void clear_false_();
  const ::bridge::TokenFalse& false_() const;
  PROTOBUF_NODISCARD ::bridge::TokenFalse* release_false_();
  ::bridge::TokenFalse* mutable_false_();
  void set_allocated_false_(::bridge::TokenFalse* false_);
  private:
  const ::bridge::TokenFalse& _internal_false_() const;
  ::bridge::TokenFalse* _internal_mutable_false_();
  public:
  void unsafe_arena_set_allocated_false_(
      ::bridge::TokenFalse* false_);
  ::bridge::TokenFalse* unsafe_arena_release_false_();

  // .bridge.TokenList list = 9;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::bridge::TokenList& list() const;
  PROTOBUF_NODISCARD ::bridge::TokenList* release_list();
  ::bridge::TokenList* mutable_list();
  void set_allocated_list(::bridge::TokenList* list);
  private:
  const ::bridge::TokenList& _internal_list() const;
  ::bridge::TokenList* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::bridge::TokenList* list);
  ::bridge::TokenList* unsafe_arena_release_list();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:bridge.Token)
 private:
  class _Internal;
  void set_has_symbol();
  void set_has_keyword();
  void set_has_string();
  void set_has_number();
  void set_has_nil();
  void set_has_true_();
  void set_has_false_();
  void set_has_list();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bridge::TokenSymbol* symbol_;
      ::bridge::TokenKeyword* keyword_;
      ::bridge::TokenString* string_;
      ::bridge::TokenNumber* number_;
      ::bridge::TokenNil* nil_;
      ::bridge::TokenTrue* true__;
      ::bridge::TokenFalse* false__;
      ::bridge::TokenList* list_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenSymbol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bridge.TokenSymbol) */ {
 public:
  inline TokenSymbol() : TokenSymbol(nullptr) {}
  ~TokenSymbol() override;
  explicit PROTOBUF_CONSTEXPR TokenSymbol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenSymbol(const TokenSymbol& from);
  TokenSymbol(TokenSymbol&& from) noexcept
    : TokenSymbol() {
    *this = ::std::move(from);
  }

  inline TokenSymbol& operator=(const TokenSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenSymbol& operator=(TokenSymbol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenSymbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenSymbol* internal_default_instance() {
    return reinterpret_cast<const TokenSymbol*>(
               &_TokenSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenSymbol& a, TokenSymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenSymbol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenSymbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenSymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenSymbol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenSymbol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenSymbol& from) {
    TokenSymbol::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenSymbol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenSymbol";
  }
  protected:
  explicit TokenSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bridge.TokenSymbol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenKeyword final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bridge.TokenKeyword) */ {
 public:
  inline TokenKeyword() : TokenKeyword(nullptr) {}
  ~TokenKeyword() override;
  explicit PROTOBUF_CONSTEXPR TokenKeyword(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenKeyword(const TokenKeyword& from);
  TokenKeyword(TokenKeyword&& from) noexcept
    : TokenKeyword() {
    *this = ::std::move(from);
  }

  inline TokenKeyword& operator=(const TokenKeyword& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenKeyword& operator=(TokenKeyword&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenKeyword& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenKeyword* internal_default_instance() {
    return reinterpret_cast<const TokenKeyword*>(
               &_TokenKeyword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TokenKeyword& a, TokenKeyword& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenKeyword* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenKeyword* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenKeyword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenKeyword>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenKeyword& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenKeyword& from) {
    TokenKeyword::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenKeyword* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenKeyword";
  }
  protected:
  explicit TokenKeyword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bridge.TokenKeyword)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bridge.TokenString) */ {
 public:
  inline TokenString() : TokenString(nullptr) {}
  ~TokenString() override;
  explicit PROTOBUF_CONSTEXPR TokenString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenString(const TokenString& from);
  TokenString(TokenString&& from) noexcept
    : TokenString() {
    *this = ::std::move(from);
  }

  inline TokenString& operator=(const TokenString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenString& operator=(TokenString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenString& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenString* internal_default_instance() {
    return reinterpret_cast<const TokenString*>(
               &_TokenString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TokenString& a, TokenString& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenString& from) {
    TokenString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenString";
  }
  protected:
  explicit TokenString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bridge.TokenString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bridge.TokenNumber) */ {
 public:
  inline TokenNumber() : TokenNumber(nullptr) {}
  ~TokenNumber() override;
  explicit PROTOBUF_CONSTEXPR TokenNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenNumber(const TokenNumber& from);
  TokenNumber(TokenNumber&& from) noexcept
    : TokenNumber() {
    *this = ::std::move(from);
  }

  inline TokenNumber& operator=(const TokenNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenNumber& operator=(TokenNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenNumber* internal_default_instance() {
    return reinterpret_cast<const TokenNumber*>(
               &_TokenNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TokenNumber& a, TokenNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenNumber& from) {
    TokenNumber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenNumber";
  }
  protected:
  explicit TokenNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:bridge.TokenNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenNil final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bridge.TokenNil) */ {
 public:
  inline TokenNil() : TokenNil(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TokenNil(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenNil(const TokenNil& from);
  TokenNil(TokenNil&& from) noexcept
    : TokenNil() {
    *this = ::std::move(from);
  }

  inline TokenNil& operator=(const TokenNil& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenNil& operator=(TokenNil&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenNil& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenNil* internal_default_instance() {
    return reinterpret_cast<const TokenNil*>(
               &_TokenNil_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TokenNil& a, TokenNil& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenNil* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenNil* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenNil* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenNil>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TokenNil& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TokenNil& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenNil";
  }
  protected:
  explicit TokenNil(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bridge.TokenNil)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenTrue final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bridge.TokenTrue) */ {
 public:
  inline TokenTrue() : TokenTrue(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TokenTrue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenTrue(const TokenTrue& from);
  TokenTrue(TokenTrue&& from) noexcept
    : TokenTrue() {
    *this = ::std::move(from);
  }

  inline TokenTrue& operator=(const TokenTrue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenTrue& operator=(TokenTrue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenTrue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenTrue* internal_default_instance() {
    return reinterpret_cast<const TokenTrue*>(
               &_TokenTrue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TokenTrue& a, TokenTrue& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenTrue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenTrue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenTrue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenTrue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TokenTrue& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TokenTrue& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenTrue";
  }
  protected:
  explicit TokenTrue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bridge.TokenTrue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenFalse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bridge.TokenFalse) */ {
 public:
  inline TokenFalse() : TokenFalse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TokenFalse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenFalse(const TokenFalse& from);
  TokenFalse(TokenFalse&& from) noexcept
    : TokenFalse() {
    *this = ::std::move(from);
  }

  inline TokenFalse& operator=(const TokenFalse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenFalse& operator=(TokenFalse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenFalse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenFalse* internal_default_instance() {
    return reinterpret_cast<const TokenFalse*>(
               &_TokenFalse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TokenFalse& a, TokenFalse& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenFalse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenFalse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenFalse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenFalse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TokenFalse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TokenFalse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenFalse";
  }
  protected:
  explicit TokenFalse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bridge.TokenFalse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bridge_2eproto;
};
// -------------------------------------------------------------------

class TokenList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bridge.TokenList) */ {
 public:
  inline TokenList() : TokenList(nullptr) {}
  ~TokenList() override;
  explicit PROTOBUF_CONSTEXPR TokenList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenList(const TokenList& from);
  TokenList(TokenList&& from) noexcept
    : TokenList() {
    *this = ::std::move(from);
  }

  inline TokenList& operator=(const TokenList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenList& operator=(TokenList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenList* internal_default_instance() {
    return reinterpret_cast<const TokenList*>(
               &_TokenList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TokenList& a, TokenList& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenList& from) {
    TokenList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bridge.TokenList";
  }
  protected:
  explicit TokenList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kStartSymbolFieldNumber = 1,
    kEndSymbolFieldNumber = 2,
  };
  // repeated .bridge.Token list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::bridge::Token* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bridge::Token >*
      mutable_list();
  private:
  const ::bridge::Token& _internal_list(int index) const;
  ::bridge::Token* _internal_add_list();
  public:
  const ::bridge::Token& list(int index) const;
  ::bridge::Token* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bridge::Token >&
      list() const;

  // string start_symbol = 1;
  void clear_start_symbol();
  const std::string& start_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_symbol();
  PROTOBUF_NODISCARD std::string* release_start_symbol();
  void set_allocated_start_symbol(std::string* start_symbol);
  private:
  const std::string& _internal_start_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_symbol(const std::string& value);
  std::string* _internal_mutable_start_symbol();
  public:

  // string end_symbol = 2;
  void clear_end_symbol();
  const std::string& end_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_symbol();
  PROTOBUF_NODISCARD std::string* release_end_symbol();
  void set_allocated_end_symbol(std::string* end_symbol);
  private:
  const std::string& _internal_end_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_symbol(const std::string& value);
  std::string* _internal_mutable_end_symbol();
  public:

  // @@protoc_insertion_point(class_scope:bridge.TokenList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bridge::Token > list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_symbol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// .bridge.TokenType type = 1;
inline void Token::clear_type() {
  _impl_.type_ = 0;
}
inline ::bridge::TokenType Token::_internal_type() const {
  return static_cast< ::bridge::TokenType >(_impl_.type_);
}
inline ::bridge::TokenType Token::type() const {
  // @@protoc_insertion_point(field_get:bridge.Token.type)
  return _internal_type();
}
inline void Token::_internal_set_type(::bridge::TokenType value) {
  
  _impl_.type_ = value;
}
inline void Token::set_type(::bridge::TokenType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bridge.Token.type)
}

// .bridge.TokenSymbol symbol = 2;
inline bool Token::_internal_has_symbol() const {
  return value_case() == kSymbol;
}
inline bool Token::has_symbol() const {
  return _internal_has_symbol();
}
inline void Token::set_has_symbol() {
  _impl_._oneof_case_[0] = kSymbol;
}
inline void Token::clear_symbol() {
  if (_internal_has_symbol()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.symbol_;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenSymbol* Token::release_symbol() {
  // @@protoc_insertion_point(field_release:bridge.Token.symbol)
  if (_internal_has_symbol()) {
    clear_has_value();
    ::bridge::TokenSymbol* temp = _impl_.value_.symbol_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.symbol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenSymbol& Token::_internal_symbol() const {
  return _internal_has_symbol()
      ? *_impl_.value_.symbol_
      : reinterpret_cast< ::bridge::TokenSymbol&>(::bridge::_TokenSymbol_default_instance_);
}
inline const ::bridge::TokenSymbol& Token::symbol() const {
  // @@protoc_insertion_point(field_get:bridge.Token.symbol)
  return _internal_symbol();
}
inline ::bridge::TokenSymbol* Token::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.symbol)
  if (_internal_has_symbol()) {
    clear_has_value();
    ::bridge::TokenSymbol* temp = _impl_.value_.symbol_;
    _impl_.value_.symbol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_symbol(::bridge::TokenSymbol* symbol) {
  clear_value();
  if (symbol) {
    set_has_symbol();
    _impl_.value_.symbol_ = symbol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.symbol)
}
inline ::bridge::TokenSymbol* Token::_internal_mutable_symbol() {
  if (!_internal_has_symbol()) {
    clear_value();
    set_has_symbol();
    _impl_.value_.symbol_ = CreateMaybeMessage< ::bridge::TokenSymbol >(GetArenaForAllocation());
  }
  return _impl_.value_.symbol_;
}
inline ::bridge::TokenSymbol* Token::mutable_symbol() {
  ::bridge::TokenSymbol* _msg = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:bridge.Token.symbol)
  return _msg;
}

// .bridge.TokenKeyword keyword = 3;
inline bool Token::_internal_has_keyword() const {
  return value_case() == kKeyword;
}
inline bool Token::has_keyword() const {
  return _internal_has_keyword();
}
inline void Token::set_has_keyword() {
  _impl_._oneof_case_[0] = kKeyword;
}
inline void Token::clear_keyword() {
  if (_internal_has_keyword()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.keyword_;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenKeyword* Token::release_keyword() {
  // @@protoc_insertion_point(field_release:bridge.Token.keyword)
  if (_internal_has_keyword()) {
    clear_has_value();
    ::bridge::TokenKeyword* temp = _impl_.value_.keyword_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.keyword_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenKeyword& Token::_internal_keyword() const {
  return _internal_has_keyword()
      ? *_impl_.value_.keyword_
      : reinterpret_cast< ::bridge::TokenKeyword&>(::bridge::_TokenKeyword_default_instance_);
}
inline const ::bridge::TokenKeyword& Token::keyword() const {
  // @@protoc_insertion_point(field_get:bridge.Token.keyword)
  return _internal_keyword();
}
inline ::bridge::TokenKeyword* Token::unsafe_arena_release_keyword() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.keyword)
  if (_internal_has_keyword()) {
    clear_has_value();
    ::bridge::TokenKeyword* temp = _impl_.value_.keyword_;
    _impl_.value_.keyword_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_keyword(::bridge::TokenKeyword* keyword) {
  clear_value();
  if (keyword) {
    set_has_keyword();
    _impl_.value_.keyword_ = keyword;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.keyword)
}
inline ::bridge::TokenKeyword* Token::_internal_mutable_keyword() {
  if (!_internal_has_keyword()) {
    clear_value();
    set_has_keyword();
    _impl_.value_.keyword_ = CreateMaybeMessage< ::bridge::TokenKeyword >(GetArenaForAllocation());
  }
  return _impl_.value_.keyword_;
}
inline ::bridge::TokenKeyword* Token::mutable_keyword() {
  ::bridge::TokenKeyword* _msg = _internal_mutable_keyword();
  // @@protoc_insertion_point(field_mutable:bridge.Token.keyword)
  return _msg;
}

// .bridge.TokenString string = 4;
inline bool Token::_internal_has_string() const {
  return value_case() == kString;
}
inline bool Token::has_string() const {
  return _internal_has_string();
}
inline void Token::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void Token::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.string_;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenString* Token::release_string() {
  // @@protoc_insertion_point(field_release:bridge.Token.string)
  if (_internal_has_string()) {
    clear_has_value();
    ::bridge::TokenString* temp = _impl_.value_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenString& Token::_internal_string() const {
  return _internal_has_string()
      ? *_impl_.value_.string_
      : reinterpret_cast< ::bridge::TokenString&>(::bridge::_TokenString_default_instance_);
}
inline const ::bridge::TokenString& Token::string() const {
  // @@protoc_insertion_point(field_get:bridge.Token.string)
  return _internal_string();
}
inline ::bridge::TokenString* Token::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.string)
  if (_internal_has_string()) {
    clear_has_value();
    ::bridge::TokenString* temp = _impl_.value_.string_;
    _impl_.value_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_string(::bridge::TokenString* string) {
  clear_value();
  if (string) {
    set_has_string();
    _impl_.value_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.string)
}
inline ::bridge::TokenString* Token::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    _impl_.value_.string_ = CreateMaybeMessage< ::bridge::TokenString >(GetArenaForAllocation());
  }
  return _impl_.value_.string_;
}
inline ::bridge::TokenString* Token::mutable_string() {
  ::bridge::TokenString* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:bridge.Token.string)
  return _msg;
}

// .bridge.TokenNumber number = 5;
inline bool Token::_internal_has_number() const {
  return value_case() == kNumber;
}
inline bool Token::has_number() const {
  return _internal_has_number();
}
inline void Token::set_has_number() {
  _impl_._oneof_case_[0] = kNumber;
}
inline void Token::clear_number() {
  if (_internal_has_number()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.number_;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenNumber* Token::release_number() {
  // @@protoc_insertion_point(field_release:bridge.Token.number)
  if (_internal_has_number()) {
    clear_has_value();
    ::bridge::TokenNumber* temp = _impl_.value_.number_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenNumber& Token::_internal_number() const {
  return _internal_has_number()
      ? *_impl_.value_.number_
      : reinterpret_cast< ::bridge::TokenNumber&>(::bridge::_TokenNumber_default_instance_);
}
inline const ::bridge::TokenNumber& Token::number() const {
  // @@protoc_insertion_point(field_get:bridge.Token.number)
  return _internal_number();
}
inline ::bridge::TokenNumber* Token::unsafe_arena_release_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.number)
  if (_internal_has_number()) {
    clear_has_value();
    ::bridge::TokenNumber* temp = _impl_.value_.number_;
    _impl_.value_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_number(::bridge::TokenNumber* number) {
  clear_value();
  if (number) {
    set_has_number();
    _impl_.value_.number_ = number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.number)
}
inline ::bridge::TokenNumber* Token::_internal_mutable_number() {
  if (!_internal_has_number()) {
    clear_value();
    set_has_number();
    _impl_.value_.number_ = CreateMaybeMessage< ::bridge::TokenNumber >(GetArenaForAllocation());
  }
  return _impl_.value_.number_;
}
inline ::bridge::TokenNumber* Token::mutable_number() {
  ::bridge::TokenNumber* _msg = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:bridge.Token.number)
  return _msg;
}

// .bridge.TokenNil nil = 6;
inline bool Token::_internal_has_nil() const {
  return value_case() == kNil;
}
inline bool Token::has_nil() const {
  return _internal_has_nil();
}
inline void Token::set_has_nil() {
  _impl_._oneof_case_[0] = kNil;
}
inline void Token::clear_nil() {
  if (_internal_has_nil()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.nil_;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenNil* Token::release_nil() {
  // @@protoc_insertion_point(field_release:bridge.Token.nil)
  if (_internal_has_nil()) {
    clear_has_value();
    ::bridge::TokenNil* temp = _impl_.value_.nil_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.nil_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenNil& Token::_internal_nil() const {
  return _internal_has_nil()
      ? *_impl_.value_.nil_
      : reinterpret_cast< ::bridge::TokenNil&>(::bridge::_TokenNil_default_instance_);
}
inline const ::bridge::TokenNil& Token::nil() const {
  // @@protoc_insertion_point(field_get:bridge.Token.nil)
  return _internal_nil();
}
inline ::bridge::TokenNil* Token::unsafe_arena_release_nil() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.nil)
  if (_internal_has_nil()) {
    clear_has_value();
    ::bridge::TokenNil* temp = _impl_.value_.nil_;
    _impl_.value_.nil_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_nil(::bridge::TokenNil* nil) {
  clear_value();
  if (nil) {
    set_has_nil();
    _impl_.value_.nil_ = nil;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.nil)
}
inline ::bridge::TokenNil* Token::_internal_mutable_nil() {
  if (!_internal_has_nil()) {
    clear_value();
    set_has_nil();
    _impl_.value_.nil_ = CreateMaybeMessage< ::bridge::TokenNil >(GetArenaForAllocation());
  }
  return _impl_.value_.nil_;
}
inline ::bridge::TokenNil* Token::mutable_nil() {
  ::bridge::TokenNil* _msg = _internal_mutable_nil();
  // @@protoc_insertion_point(field_mutable:bridge.Token.nil)
  return _msg;
}

// .bridge.TokenTrue true = 7;
inline bool Token::_internal_has_true_() const {
  return value_case() == kTrue;
}
inline bool Token::has_true_() const {
  return _internal_has_true_();
}
inline void Token::set_has_true_() {
  _impl_._oneof_case_[0] = kTrue;
}
inline void Token::clear_true_() {
  if (_internal_has_true_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.true__;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenTrue* Token::release_true_() {
  // @@protoc_insertion_point(field_release:bridge.Token.true)
  if (_internal_has_true_()) {
    clear_has_value();
    ::bridge::TokenTrue* temp = _impl_.value_.true__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.true__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenTrue& Token::_internal_true_() const {
  return _internal_has_true_()
      ? *_impl_.value_.true__
      : reinterpret_cast< ::bridge::TokenTrue&>(::bridge::_TokenTrue_default_instance_);
}
inline const ::bridge::TokenTrue& Token::true_() const {
  // @@protoc_insertion_point(field_get:bridge.Token.true)
  return _internal_true_();
}
inline ::bridge::TokenTrue* Token::unsafe_arena_release_true_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.true)
  if (_internal_has_true_()) {
    clear_has_value();
    ::bridge::TokenTrue* temp = _impl_.value_.true__;
    _impl_.value_.true__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_true_(::bridge::TokenTrue* true_) {
  clear_value();
  if (true_) {
    set_has_true_();
    _impl_.value_.true__ = true_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.true)
}
inline ::bridge::TokenTrue* Token::_internal_mutable_true_() {
  if (!_internal_has_true_()) {
    clear_value();
    set_has_true_();
    _impl_.value_.true__ = CreateMaybeMessage< ::bridge::TokenTrue >(GetArenaForAllocation());
  }
  return _impl_.value_.true__;
}
inline ::bridge::TokenTrue* Token::mutable_true_() {
  ::bridge::TokenTrue* _msg = _internal_mutable_true_();
  // @@protoc_insertion_point(field_mutable:bridge.Token.true)
  return _msg;
}

// .bridge.TokenFalse false = 8;
inline bool Token::_internal_has_false_() const {
  return value_case() == kFalse;
}
inline bool Token::has_false_() const {
  return _internal_has_false_();
}
inline void Token::set_has_false_() {
  _impl_._oneof_case_[0] = kFalse;
}
inline void Token::clear_false_() {
  if (_internal_has_false_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.false__;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenFalse* Token::release_false_() {
  // @@protoc_insertion_point(field_release:bridge.Token.false)
  if (_internal_has_false_()) {
    clear_has_value();
    ::bridge::TokenFalse* temp = _impl_.value_.false__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.false__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenFalse& Token::_internal_false_() const {
  return _internal_has_false_()
      ? *_impl_.value_.false__
      : reinterpret_cast< ::bridge::TokenFalse&>(::bridge::_TokenFalse_default_instance_);
}
inline const ::bridge::TokenFalse& Token::false_() const {
  // @@protoc_insertion_point(field_get:bridge.Token.false)
  return _internal_false_();
}
inline ::bridge::TokenFalse* Token::unsafe_arena_release_false_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.false)
  if (_internal_has_false_()) {
    clear_has_value();
    ::bridge::TokenFalse* temp = _impl_.value_.false__;
    _impl_.value_.false__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_false_(::bridge::TokenFalse* false_) {
  clear_value();
  if (false_) {
    set_has_false_();
    _impl_.value_.false__ = false_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.false)
}
inline ::bridge::TokenFalse* Token::_internal_mutable_false_() {
  if (!_internal_has_false_()) {
    clear_value();
    set_has_false_();
    _impl_.value_.false__ = CreateMaybeMessage< ::bridge::TokenFalse >(GetArenaForAllocation());
  }
  return _impl_.value_.false__;
}
inline ::bridge::TokenFalse* Token::mutable_false_() {
  ::bridge::TokenFalse* _msg = _internal_mutable_false_();
  // @@protoc_insertion_point(field_mutable:bridge.Token.false)
  return _msg;
}

// .bridge.TokenList list = 9;
inline bool Token::_internal_has_list() const {
  return value_case() == kList;
}
inline bool Token::has_list() const {
  return _internal_has_list();
}
inline void Token::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Token::clear_list() {
  if (_internal_has_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.list_;
    }
    clear_has_value();
  }
}
inline ::bridge::TokenList* Token::release_list() {
  // @@protoc_insertion_point(field_release:bridge.Token.list)
  if (_internal_has_list()) {
    clear_has_value();
    ::bridge::TokenList* temp = _impl_.value_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bridge::TokenList& Token::_internal_list() const {
  return _internal_has_list()
      ? *_impl_.value_.list_
      : reinterpret_cast< ::bridge::TokenList&>(::bridge::_TokenList_default_instance_);
}
inline const ::bridge::TokenList& Token::list() const {
  // @@protoc_insertion_point(field_get:bridge.Token.list)
  return _internal_list();
}
inline ::bridge::TokenList* Token::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bridge.Token.list)
  if (_internal_has_list()) {
    clear_has_value();
    ::bridge::TokenList* temp = _impl_.value_.list_;
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Token::unsafe_arena_set_allocated_list(::bridge::TokenList* list) {
  clear_value();
  if (list) {
    set_has_list();
    _impl_.value_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bridge.Token.list)
}
inline ::bridge::TokenList* Token::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_value();
    set_has_list();
    _impl_.value_.list_ = CreateMaybeMessage< ::bridge::TokenList >(GetArenaForAllocation());
  }
  return _impl_.value_.list_;
}
inline ::bridge::TokenList* Token::mutable_list() {
  ::bridge::TokenList* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:bridge.Token.list)
  return _msg;
}

inline bool Token::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Token::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Token::ValueCase Token::value_case() const {
  return Token::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TokenSymbol

// string name = 1;
inline void TokenSymbol::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TokenSymbol::name() const {
  // @@protoc_insertion_point(field_get:bridge.TokenSymbol.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenSymbol::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bridge.TokenSymbol.name)
}
inline std::string* TokenSymbol::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bridge.TokenSymbol.name)
  return _s;
}
inline const std::string& TokenSymbol::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TokenSymbol::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenSymbol::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenSymbol::release_name() {
  // @@protoc_insertion_point(field_release:bridge.TokenSymbol.name)
  return _impl_.name_.Release();
}
inline void TokenSymbol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bridge.TokenSymbol.name)
}

// -------------------------------------------------------------------

// TokenKeyword

// string value = 1;
inline void TokenKeyword::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& TokenKeyword::value() const {
  // @@protoc_insertion_point(field_get:bridge.TokenKeyword.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenKeyword::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bridge.TokenKeyword.value)
}
inline std::string* TokenKeyword::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:bridge.TokenKeyword.value)
  return _s;
}
inline const std::string& TokenKeyword::_internal_value() const {
  return _impl_.value_.Get();
}
inline void TokenKeyword::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenKeyword::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenKeyword::release_value() {
  // @@protoc_insertion_point(field_release:bridge.TokenKeyword.value)
  return _impl_.value_.Release();
}
inline void TokenKeyword::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bridge.TokenKeyword.value)
}

// -------------------------------------------------------------------

// TokenString

// string value = 1;
inline void TokenString::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& TokenString::value() const {
  // @@protoc_insertion_point(field_get:bridge.TokenString.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenString::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bridge.TokenString.value)
}
inline std::string* TokenString::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:bridge.TokenString.value)
  return _s;
}
inline const std::string& TokenString::_internal_value() const {
  return _impl_.value_.Get();
}
inline void TokenString::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenString::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenString::release_value() {
  // @@protoc_insertion_point(field_release:bridge.TokenString.value)
  return _impl_.value_.Release();
}
inline void TokenString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bridge.TokenString.value)
}

// -------------------------------------------------------------------

// TokenNumber

// double value = 1;
inline void TokenNumber::clear_value() {
  _impl_.value_ = 0;
}
inline double TokenNumber::_internal_value() const {
  return _impl_.value_;
}
inline double TokenNumber::value() const {
  // @@protoc_insertion_point(field_get:bridge.TokenNumber.value)
  return _internal_value();
}
inline void TokenNumber::_internal_set_value(double value) {
  
  _impl_.value_ = value;
}
inline void TokenNumber::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bridge.TokenNumber.value)
}

// -------------------------------------------------------------------

// TokenNil

// -------------------------------------------------------------------

// TokenTrue

// -------------------------------------------------------------------

// TokenFalse

// -------------------------------------------------------------------

// TokenList

// string start_symbol = 1;
inline void TokenList::clear_start_symbol() {
  _impl_.start_symbol_.ClearToEmpty();
}
inline const std::string& TokenList::start_symbol() const {
  // @@protoc_insertion_point(field_get:bridge.TokenList.start_symbol)
  return _internal_start_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenList::set_start_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.start_symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bridge.TokenList.start_symbol)
}
inline std::string* TokenList::mutable_start_symbol() {
  std::string* _s = _internal_mutable_start_symbol();
  // @@protoc_insertion_point(field_mutable:bridge.TokenList.start_symbol)
  return _s;
}
inline const std::string& TokenList::_internal_start_symbol() const {
  return _impl_.start_symbol_.Get();
}
inline void TokenList::_internal_set_start_symbol(const std::string& value) {
  
  _impl_.start_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenList::_internal_mutable_start_symbol() {
  
  return _impl_.start_symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenList::release_start_symbol() {
  // @@protoc_insertion_point(field_release:bridge.TokenList.start_symbol)
  return _impl_.start_symbol_.Release();
}
inline void TokenList::set_allocated_start_symbol(std::string* start_symbol) {
  if (start_symbol != nullptr) {
    
  } else {
    
  }
  _impl_.start_symbol_.SetAllocated(start_symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_symbol_.IsDefault()) {
    _impl_.start_symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bridge.TokenList.start_symbol)
}

// string end_symbol = 2;
inline void TokenList::clear_end_symbol() {
  _impl_.end_symbol_.ClearToEmpty();
}
inline const std::string& TokenList::end_symbol() const {
  // @@protoc_insertion_point(field_get:bridge.TokenList.end_symbol)
  return _internal_end_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenList::set_end_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.end_symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bridge.TokenList.end_symbol)
}
inline std::string* TokenList::mutable_end_symbol() {
  std::string* _s = _internal_mutable_end_symbol();
  // @@protoc_insertion_point(field_mutable:bridge.TokenList.end_symbol)
  return _s;
}
inline const std::string& TokenList::_internal_end_symbol() const {
  return _impl_.end_symbol_.Get();
}
inline void TokenList::_internal_set_end_symbol(const std::string& value) {
  
  _impl_.end_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenList::_internal_mutable_end_symbol() {
  
  return _impl_.end_symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenList::release_end_symbol() {
  // @@protoc_insertion_point(field_release:bridge.TokenList.end_symbol)
  return _impl_.end_symbol_.Release();
}
inline void TokenList::set_allocated_end_symbol(std::string* end_symbol) {
  if (end_symbol != nullptr) {
    
  } else {
    
  }
  _impl_.end_symbol_.SetAllocated(end_symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_symbol_.IsDefault()) {
    _impl_.end_symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bridge.TokenList.end_symbol)
}

// repeated .bridge.Token list = 3;
inline int TokenList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int TokenList::list_size() const {
  return _internal_list_size();
}
inline void TokenList::clear_list() {
  _impl_.list_.Clear();
}
inline ::bridge::Token* TokenList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:bridge.TokenList.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bridge::Token >*
TokenList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:bridge.TokenList.list)
  return &_impl_.list_;
}
inline const ::bridge::Token& TokenList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::bridge::Token& TokenList::list(int index) const {
  // @@protoc_insertion_point(field_get:bridge.TokenList.list)
  return _internal_list(index);
}
inline ::bridge::Token* TokenList::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::bridge::Token* TokenList::add_list() {
  ::bridge::Token* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:bridge.TokenList.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bridge::Token >&
TokenList::list() const {
  // @@protoc_insertion_point(field_list:bridge.TokenList.list)
  return _impl_.list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bridge

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bridge::TokenType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bridge::TokenType>() {
  return ::bridge::TokenType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bridge_2eproto
