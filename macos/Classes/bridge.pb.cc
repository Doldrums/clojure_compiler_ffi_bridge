// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge.proto

#include "bridge.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bridge {
PROTOBUF_CONSTEXPR Token::Token(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
PROTOBUF_CONSTEXPR TokenSymbol::TokenSymbol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenSymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenSymbolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenSymbolDefaultTypeInternal() {}
  union {
    TokenSymbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenSymbolDefaultTypeInternal _TokenSymbol_default_instance_;
PROTOBUF_CONSTEXPR TokenKeyword::TokenKeyword(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenKeywordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenKeywordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenKeywordDefaultTypeInternal() {}
  union {
    TokenKeyword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenKeywordDefaultTypeInternal _TokenKeyword_default_instance_;
PROTOBUF_CONSTEXPR TokenString::TokenString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenStringDefaultTypeInternal() {}
  union {
    TokenString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenStringDefaultTypeInternal _TokenString_default_instance_;
PROTOBUF_CONSTEXPR TokenNumber::TokenNumber(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenNumberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenNumberDefaultTypeInternal() {}
  union {
    TokenNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenNumberDefaultTypeInternal _TokenNumber_default_instance_;
PROTOBUF_CONSTEXPR TokenNil::TokenNil(
    ::_pbi::ConstantInitialized) {}
struct TokenNilDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenNilDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenNilDefaultTypeInternal() {}
  union {
    TokenNil _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenNilDefaultTypeInternal _TokenNil_default_instance_;
PROTOBUF_CONSTEXPR TokenTrue::TokenTrue(
    ::_pbi::ConstantInitialized) {}
struct TokenTrueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenTrueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenTrueDefaultTypeInternal() {}
  union {
    TokenTrue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenTrueDefaultTypeInternal _TokenTrue_default_instance_;
PROTOBUF_CONSTEXPR TokenFalse::TokenFalse(
    ::_pbi::ConstantInitialized) {}
struct TokenFalseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenFalseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenFalseDefaultTypeInternal() {}
  union {
    TokenFalse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenFalseDefaultTypeInternal _TokenFalse_default_instance_;
PROTOBUF_CONSTEXPR TokenList::TokenList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.start_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenListDefaultTypeInternal() {}
  union {
    TokenList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenListDefaultTypeInternal _TokenList_default_instance_;
}  // namespace bridge
static ::_pb::Metadata file_level_metadata_bridge_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bridge_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bridge_2eproto = nullptr;

const uint32_t TableStruct_bridge_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bridge::Token, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bridge::Token, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bridge::Token, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenSymbol, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenKeyword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenKeyword, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenString, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenNumber, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenNil, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenTrue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenFalse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bridge::TokenList, _impl_.start_symbol_),
  PROTOBUF_FIELD_OFFSET(::bridge::TokenList, _impl_.end_symbol_),
  PROTOBUF_FIELD_OFFSET(::bridge::TokenList, _impl_.list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bridge::Token)},
  { 16, -1, -1, sizeof(::bridge::TokenSymbol)},
  { 23, -1, -1, sizeof(::bridge::TokenKeyword)},
  { 30, -1, -1, sizeof(::bridge::TokenString)},
  { 37, -1, -1, sizeof(::bridge::TokenNumber)},
  { 44, -1, -1, sizeof(::bridge::TokenNil)},
  { 50, -1, -1, sizeof(::bridge::TokenTrue)},
  { 56, -1, -1, sizeof(::bridge::TokenFalse)},
  { 62, -1, -1, sizeof(::bridge::TokenList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bridge::_Token_default_instance_._instance,
  &::bridge::_TokenSymbol_default_instance_._instance,
  &::bridge::_TokenKeyword_default_instance_._instance,
  &::bridge::_TokenString_default_instance_._instance,
  &::bridge::_TokenNumber_default_instance_._instance,
  &::bridge::_TokenNil_default_instance_._instance,
  &::bridge::_TokenTrue_default_instance_._instance,
  &::bridge::_TokenFalse_default_instance_._instance,
  &::bridge::_TokenList_default_instance_._instance,
};

const char descriptor_table_protodef_bridge_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014bridge.proto\022\006bridge\"\333\002\n\005Token\022\037\n\004type"
  "\030\001 \001(\0162\021.bridge.TokenType\022%\n\006symbol\030\002 \001("
  "\0132\023.bridge.TokenSymbolH\000\022\'\n\007keyword\030\003 \001("
  "\0132\024.bridge.TokenKeywordH\000\022%\n\006string\030\004 \001("
  "\0132\023.bridge.TokenStringH\000\022%\n\006number\030\005 \001(\013"
  "2\023.bridge.TokenNumberH\000\022\037\n\003nil\030\006 \001(\0132\020.b"
  "ridge.TokenNilH\000\022!\n\004true\030\007 \001(\0132\021.bridge."
  "TokenTrueH\000\022#\n\005false\030\010 \001(\0132\022.bridge.Toke"
  "nFalseH\000\022!\n\004list\030\t \001(\0132\021.bridge.TokenLis"
  "tH\000B\007\n\005value\"\033\n\013TokenSymbol\022\014\n\004name\030\001 \001("
  "\t\"\035\n\014TokenKeyword\022\r\n\005value\030\001 \001(\t\"\034\n\013Toke"
  "nString\022\r\n\005value\030\001 \001(\t\"\034\n\013TokenNumber\022\r\n"
  "\005value\030\001 \001(\001\"\n\n\010TokenNil\"\013\n\tTokenTrue\"\014\n"
  "\nTokenFalse\"R\n\tTokenList\022\024\n\014start_symbol"
  "\030\001 \001(\t\022\022\n\nend_symbol\030\002 \001(\t\022\033\n\004list\030\003 \003(\013"
  "2\r.bridge.Token*|\n\tTokenType\022\r\n\tTT_SYMBO"
  "L\020\000\022\016\n\nTT_KEYWORD\020\001\022\r\n\tTT_STRING\020\002\022\r\n\tTT"
  "_NUMBER\020\003\022\n\n\006TT_NIL\020\004\022\013\n\007TT_TRUE\020\005\022\014\n\010TT"
  "_FALSE\020\006\022\013\n\007TT_LIST\020\007b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_bridge_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bridge_2eproto = {
    false, false, 749, descriptor_table_protodef_bridge_2eproto,
    "bridge.proto",
    &descriptor_table_bridge_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_bridge_2eproto::offsets,
    file_level_metadata_bridge_2eproto, file_level_enum_descriptors_bridge_2eproto,
    file_level_service_descriptors_bridge_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bridge_2eproto_getter() {
  return &descriptor_table_bridge_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bridge_2eproto(&descriptor_table_bridge_2eproto);
namespace bridge {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TokenType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bridge_2eproto);
  return file_level_enum_descriptors_bridge_2eproto[0];
}
bool TokenType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Token::_Internal {
 public:
  static const ::bridge::TokenSymbol& symbol(const Token* msg);
  static const ::bridge::TokenKeyword& keyword(const Token* msg);
  static const ::bridge::TokenString& string(const Token* msg);
  static const ::bridge::TokenNumber& number(const Token* msg);
  static const ::bridge::TokenNil& nil(const Token* msg);
  static const ::bridge::TokenTrue& true_(const Token* msg);
  static const ::bridge::TokenFalse& false_(const Token* msg);
  static const ::bridge::TokenList& list(const Token* msg);
};

const ::bridge::TokenSymbol&
Token::_Internal::symbol(const Token* msg) {
  return *msg->_impl_.value_.symbol_;
}
const ::bridge::TokenKeyword&
Token::_Internal::keyword(const Token* msg) {
  return *msg->_impl_.value_.keyword_;
}
const ::bridge::TokenString&
Token::_Internal::string(const Token* msg) {
  return *msg->_impl_.value_.string_;
}
const ::bridge::TokenNumber&
Token::_Internal::number(const Token* msg) {
  return *msg->_impl_.value_.number_;
}
const ::bridge::TokenNil&
Token::_Internal::nil(const Token* msg) {
  return *msg->_impl_.value_.nil_;
}
const ::bridge::TokenTrue&
Token::_Internal::true_(const Token* msg) {
  return *msg->_impl_.value_.true__;
}
const ::bridge::TokenFalse&
Token::_Internal::false_(const Token* msg) {
  return *msg->_impl_.value_.false__;
}
const ::bridge::TokenList&
Token::_Internal::list(const Token* msg) {
  return *msg->_impl_.value_.list_;
}
void Token::set_allocated_symbol(::bridge::TokenSymbol* symbol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (symbol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(symbol);
    if (message_arena != submessage_arena) {
      symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    set_has_symbol();
    _impl_.value_.symbol_ = symbol;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.symbol)
}
void Token::set_allocated_keyword(::bridge::TokenKeyword* keyword) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (keyword) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keyword);
    if (message_arena != submessage_arena) {
      keyword = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyword, submessage_arena);
    }
    set_has_keyword();
    _impl_.value_.keyword_ = keyword;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.keyword)
}
void Token::set_allocated_string(::bridge::TokenString* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string);
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    _impl_.value_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.string)
}
void Token::set_allocated_number(::bridge::TokenNumber* number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(number);
    if (message_arena != submessage_arena) {
      number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    set_has_number();
    _impl_.value_.number_ = number;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.number)
}
void Token::set_allocated_nil(::bridge::TokenNil* nil) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (nil) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nil);
    if (message_arena != submessage_arena) {
      nil = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nil, submessage_arena);
    }
    set_has_nil();
    _impl_.value_.nil_ = nil;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.nil)
}
void Token::set_allocated_true_(::bridge::TokenTrue* true_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (true_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(true_);
    if (message_arena != submessage_arena) {
      true_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, true_, submessage_arena);
    }
    set_has_true_();
    _impl_.value_.true__ = true_;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.true)
}
void Token::set_allocated_false_(::bridge::TokenFalse* false_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (false_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(false_);
    if (message_arena != submessage_arena) {
      false_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, false_, submessage_arena);
    }
    set_has_false_();
    _impl_.value_.false__ = false_;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.false)
}
void Token::set_allocated_list(::bridge::TokenList* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:bridge.Token.list)
}
Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bridge.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Token* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kSymbol: {
      _this->_internal_mutable_symbol()->::bridge::TokenSymbol::MergeFrom(
          from._internal_symbol());
      break;
    }
    case kKeyword: {
      _this->_internal_mutable_keyword()->::bridge::TokenKeyword::MergeFrom(
          from._internal_keyword());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::bridge::TokenString::MergeFrom(
          from._internal_string());
      break;
    }
    case kNumber: {
      _this->_internal_mutable_number()->::bridge::TokenNumber::MergeFrom(
          from._internal_number());
      break;
    }
    case kNil: {
      _this->_internal_mutable_nil()->::bridge::TokenNil::MergeFrom(
          from._internal_nil());
      break;
    }
    case kTrue: {
      _this->_internal_mutable_true_()->::bridge::TokenTrue::MergeFrom(
          from._internal_true_());
      break;
    }
    case kFalse: {
      _this->_internal_mutable_false_()->::bridge::TokenFalse::MergeFrom(
          from._internal_false_());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::bridge::TokenList::MergeFrom(
          from._internal_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bridge.Token)
}

inline void Token::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:bridge.Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Token::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:bridge.Token)
  switch (value_case()) {
    case kSymbol: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.symbol_;
      }
      break;
    }
    case kKeyword: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.keyword_;
      }
      break;
    }
    case kString: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.string_;
      }
      break;
    }
    case kNumber: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.number_;
      }
      break;
    }
    case kNil: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.nil_;
      }
      break;
    }
    case kTrue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.true__;
      }
      break;
    }
    case kFalse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.false__;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.list_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:bridge.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bridge.TokenType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bridge::TokenType>(val));
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenSymbol symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenKeyword keyword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyword(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenString string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenNumber number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_number(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenNil nil = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nil(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenTrue true = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_true_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenFalse false = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_false_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bridge.TokenList list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bridge.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bridge.TokenType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .bridge.TokenSymbol symbol = 2;
  if (_internal_has_symbol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::symbol(this),
        _Internal::symbol(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenKeyword keyword = 3;
  if (_internal_has_keyword()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::keyword(this),
        _Internal::keyword(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenString string = 4;
  if (_internal_has_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::string(this),
        _Internal::string(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenNumber number = 5;
  if (_internal_has_number()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::number(this),
        _Internal::number(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenNil nil = 6;
  if (_internal_has_nil()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::nil(this),
        _Internal::nil(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenTrue true = 7;
  if (_internal_has_true_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::true_(this),
        _Internal::true_(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenFalse false = 8;
  if (_internal_has_false_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::false_(this),
        _Internal::false_(this).GetCachedSize(), target, stream);
  }

  // .bridge.TokenList list = 9;
  if (_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bridge.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bridge.Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bridge.TokenType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (value_case()) {
    // .bridge.TokenSymbol symbol = 2;
    case kSymbol: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.symbol_);
      break;
    }
    // .bridge.TokenKeyword keyword = 3;
    case kKeyword: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.keyword_);
      break;
    }
    // .bridge.TokenString string = 4;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.string_);
      break;
    }
    // .bridge.TokenNumber number = 5;
    case kNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.number_);
      break;
    }
    // .bridge.TokenNil nil = 6;
    case kNil: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.nil_);
      break;
    }
    // .bridge.TokenTrue true = 7;
    case kTrue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.true__);
      break;
    }
    // .bridge.TokenFalse false = 8;
    case kFalse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.false__);
      break;
    }
    // .bridge.TokenList list = 9;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.list_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }


void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Token*>(&to_msg);
  auto& from = static_cast<const Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bridge.Token)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.value_case()) {
    case kSymbol: {
      _this->_internal_mutable_symbol()->::bridge::TokenSymbol::MergeFrom(
          from._internal_symbol());
      break;
    }
    case kKeyword: {
      _this->_internal_mutable_keyword()->::bridge::TokenKeyword::MergeFrom(
          from._internal_keyword());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::bridge::TokenString::MergeFrom(
          from._internal_string());
      break;
    }
    case kNumber: {
      _this->_internal_mutable_number()->::bridge::TokenNumber::MergeFrom(
          from._internal_number());
      break;
    }
    case kNil: {
      _this->_internal_mutable_nil()->::bridge::TokenNil::MergeFrom(
          from._internal_nil());
      break;
    }
    case kTrue: {
      _this->_internal_mutable_true_()->::bridge::TokenTrue::MergeFrom(
          from._internal_true_());
      break;
    }
    case kFalse: {
      _this->_internal_mutable_false_()->::bridge::TokenFalse::MergeFrom(
          from._internal_false_());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::bridge::TokenList::MergeFrom(
          from._internal_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bridge.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[0]);
}

// ===================================================================

class TokenSymbol::_Internal {
 public:
};

TokenSymbol::TokenSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bridge.TokenSymbol)
}
TokenSymbol::TokenSymbol(const TokenSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenSymbol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bridge.TokenSymbol)
}

inline void TokenSymbol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenSymbol::~TokenSymbol() {
  // @@protoc_insertion_point(destructor:bridge.TokenSymbol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenSymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TokenSymbol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:bridge.TokenSymbol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenSymbol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bridge.TokenSymbol.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenSymbol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bridge.TokenSymbol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bridge.TokenSymbol.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bridge.TokenSymbol)
  return target;
}

size_t TokenSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bridge.TokenSymbol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenSymbol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenSymbol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenSymbol::GetClassData() const { return &_class_data_; }


void TokenSymbol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenSymbol*>(&to_msg);
  auto& from = static_cast<const TokenSymbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bridge.TokenSymbol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenSymbol::CopyFrom(const TokenSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bridge.TokenSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenSymbol::IsInitialized() const {
  return true;
}

void TokenSymbol::InternalSwap(TokenSymbol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenSymbol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[1]);
}

// ===================================================================

class TokenKeyword::_Internal {
 public:
};

TokenKeyword::TokenKeyword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bridge.TokenKeyword)
}
TokenKeyword::TokenKeyword(const TokenKeyword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenKeyword* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bridge.TokenKeyword)
}

inline void TokenKeyword::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenKeyword::~TokenKeyword() {
  // @@protoc_insertion_point(destructor:bridge.TokenKeyword)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenKeyword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void TokenKeyword::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenKeyword::Clear() {
// @@protoc_insertion_point(message_clear_start:bridge.TokenKeyword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenKeyword::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bridge.TokenKeyword.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenKeyword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bridge.TokenKeyword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bridge.TokenKeyword.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bridge.TokenKeyword)
  return target;
}

size_t TokenKeyword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bridge.TokenKeyword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenKeyword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenKeyword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenKeyword::GetClassData() const { return &_class_data_; }


void TokenKeyword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenKeyword*>(&to_msg);
  auto& from = static_cast<const TokenKeyword&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bridge.TokenKeyword)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenKeyword::CopyFrom(const TokenKeyword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bridge.TokenKeyword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenKeyword::IsInitialized() const {
  return true;
}

void TokenKeyword::InternalSwap(TokenKeyword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenKeyword::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[2]);
}

// ===================================================================

class TokenString::_Internal {
 public:
};

TokenString::TokenString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bridge.TokenString)
}
TokenString::TokenString(const TokenString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bridge.TokenString)
}

inline void TokenString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenString::~TokenString() {
  // @@protoc_insertion_point(destructor:bridge.TokenString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void TokenString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenString::Clear() {
// @@protoc_insertion_point(message_clear_start:bridge.TokenString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bridge.TokenString.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bridge.TokenString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bridge.TokenString.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bridge.TokenString)
  return target;
}

size_t TokenString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bridge.TokenString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenString::GetClassData() const { return &_class_data_; }


void TokenString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenString*>(&to_msg);
  auto& from = static_cast<const TokenString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bridge.TokenString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenString::CopyFrom(const TokenString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bridge.TokenString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenString::IsInitialized() const {
  return true;
}

void TokenString::InternalSwap(TokenString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[3]);
}

// ===================================================================

class TokenNumber::_Internal {
 public:
};

TokenNumber::TokenNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bridge.TokenNumber)
}
TokenNumber::TokenNumber(const TokenNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenNumber* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bridge.TokenNumber)
}

inline void TokenNumber::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenNumber::~TokenNumber() {
  // @@protoc_insertion_point(destructor:bridge.TokenNumber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TokenNumber::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:bridge.TokenNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenNumber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bridge.TokenNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bridge.TokenNumber)
  return target;
}

size_t TokenNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bridge.TokenNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenNumber::GetClassData() const { return &_class_data_; }


void TokenNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenNumber*>(&to_msg);
  auto& from = static_cast<const TokenNumber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bridge.TokenNumber)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenNumber::CopyFrom(const TokenNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bridge.TokenNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenNumber::IsInitialized() const {
  return true;
}

void TokenNumber::InternalSwap(TokenNumber* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[4]);
}

// ===================================================================

class TokenNil::_Internal {
 public:
};

TokenNil::TokenNil(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bridge.TokenNil)
}
TokenNil::TokenNil(const TokenNil& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TokenNil* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bridge.TokenNil)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenNil::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenNil::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TokenNil::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[5]);
}

// ===================================================================

class TokenTrue::_Internal {
 public:
};

TokenTrue::TokenTrue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bridge.TokenTrue)
}
TokenTrue::TokenTrue(const TokenTrue& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TokenTrue* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bridge.TokenTrue)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenTrue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenTrue::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TokenTrue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[6]);
}

// ===================================================================

class TokenFalse::_Internal {
 public:
};

TokenFalse::TokenFalse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bridge.TokenFalse)
}
TokenFalse::TokenFalse(const TokenFalse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TokenFalse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bridge.TokenFalse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenFalse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenFalse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TokenFalse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[7]);
}

// ===================================================================

class TokenList::_Internal {
 public:
};

TokenList::TokenList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bridge.TokenList)
}
TokenList::TokenList(const TokenList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.start_symbol_){}
    , decltype(_impl_.end_symbol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_symbol().empty()) {
    _this->_impl_.start_symbol_.Set(from._internal_start_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_symbol().empty()) {
    _this->_impl_.end_symbol_.Set(from._internal_end_symbol(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bridge.TokenList)
}

inline void TokenList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , decltype(_impl_.start_symbol_){}
    , decltype(_impl_.end_symbol_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.start_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenList::~TokenList() {
  // @@protoc_insertion_point(destructor:bridge.TokenList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
  _impl_.start_symbol_.Destroy();
  _impl_.end_symbol_.Destroy();
}

void TokenList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenList::Clear() {
// @@protoc_insertion_point(message_clear_start:bridge.TokenList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.start_symbol_.ClearToEmpty();
  _impl_.end_symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string start_symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bridge.TokenList.start_symbol"));
        } else
          goto handle_unusual;
        continue;
      // string end_symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_end_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bridge.TokenList.end_symbol"));
        } else
          goto handle_unusual;
        continue;
      // repeated .bridge.Token list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bridge.TokenList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_symbol = 1;
  if (!this->_internal_start_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_symbol().data(), static_cast<int>(this->_internal_start_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bridge.TokenList.start_symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_symbol(), target);
  }

  // string end_symbol = 2;
  if (!this->_internal_end_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_symbol().data(), static_cast<int>(this->_internal_end_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bridge.TokenList.end_symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_symbol(), target);
  }

  // repeated .bridge.Token list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bridge.TokenList)
  return target;
}

size_t TokenList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bridge.TokenList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bridge.Token list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string start_symbol = 1;
  if (!this->_internal_start_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_symbol());
  }

  // string end_symbol = 2;
  if (!this->_internal_end_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_symbol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenList::GetClassData() const { return &_class_data_; }


void TokenList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenList*>(&to_msg);
  auto& from = static_cast<const TokenList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bridge.TokenList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (!from._internal_start_symbol().empty()) {
    _this->_internal_set_start_symbol(from._internal_start_symbol());
  }
  if (!from._internal_end_symbol().empty()) {
    _this->_internal_set_end_symbol(from._internal_end_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenList::CopyFrom(const TokenList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bridge.TokenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenList::IsInitialized() const {
  return true;
}

void TokenList::InternalSwap(TokenList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_symbol_, lhs_arena,
      &other->_impl_.start_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_symbol_, lhs_arena,
      &other->_impl_.end_symbol_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_2eproto_getter, &descriptor_table_bridge_2eproto_once,
      file_level_metadata_bridge_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bridge::Token*
Arena::CreateMaybeMessage< ::bridge::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenSymbol*
Arena::CreateMaybeMessage< ::bridge::TokenSymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenKeyword*
Arena::CreateMaybeMessage< ::bridge::TokenKeyword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenKeyword >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenString*
Arena::CreateMaybeMessage< ::bridge::TokenString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenString >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenNumber*
Arena::CreateMaybeMessage< ::bridge::TokenNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenNil*
Arena::CreateMaybeMessage< ::bridge::TokenNil >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenNil >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenTrue*
Arena::CreateMaybeMessage< ::bridge::TokenTrue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenTrue >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenFalse*
Arena::CreateMaybeMessage< ::bridge::TokenFalse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenFalse >(arena);
}
template<> PROTOBUF_NOINLINE ::bridge::TokenList*
Arena::CreateMaybeMessage< ::bridge::TokenList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bridge::TokenList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
